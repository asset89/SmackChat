//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 65 images.
  struct image {
    /// Image `addChannelButton`.
    static let addChannelButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "addChannelButton")
    /// Image `closeButton`.
    static let closeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeButton")
    /// Image `dark0`.
    static let dark0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark0")
    /// Image `dark10`.
    static let dark10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark10")
    /// Image `dark11`.
    static let dark11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark11")
    /// Image `dark12`.
    static let dark12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark12")
    /// Image `dark13`.
    static let dark13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark13")
    /// Image `dark14`.
    static let dark14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark14")
    /// Image `dark15`.
    static let dark15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark15")
    /// Image `dark16`.
    static let dark16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark16")
    /// Image `dark17`.
    static let dark17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark17")
    /// Image `dark18`.
    static let dark18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark18")
    /// Image `dark19`.
    static let dark19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark19")
    /// Image `dark1`.
    static let dark1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark1")
    /// Image `dark20`.
    static let dark20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark20")
    /// Image `dark21`.
    static let dark21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark21")
    /// Image `dark22`.
    static let dark22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark22")
    /// Image `dark23`.
    static let dark23 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark23")
    /// Image `dark24`.
    static let dark24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark24")
    /// Image `dark25`.
    static let dark25 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark25")
    /// Image `dark26`.
    static let dark26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark26")
    /// Image `dark27`.
    static let dark27 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark27")
    /// Image `dark2`.
    static let dark2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark2")
    /// Image `dark3`.
    static let dark3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark3")
    /// Image `dark4`.
    static let dark4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark4")
    /// Image `dark5`.
    static let dark5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark5")
    /// Image `dark6`.
    static let dark6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark6")
    /// Image `dark7`.
    static let dark7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark7")
    /// Image `dark8`.
    static let dark8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark8")
    /// Image `dark9`.
    static let dark9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark9")
    /// Image `light0`.
    static let light0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light0")
    /// Image `light10`.
    static let light10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light10")
    /// Image `light11`.
    static let light11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light11")
    /// Image `light12`.
    static let light12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light12")
    /// Image `light13`.
    static let light13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light13")
    /// Image `light14`.
    static let light14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light14")
    /// Image `light15`.
    static let light15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light15")
    /// Image `light16`.
    static let light16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light16")
    /// Image `light17`.
    static let light17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light17")
    /// Image `light18`.
    static let light18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light18")
    /// Image `light19`.
    static let light19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light19")
    /// Image `light1`.
    static let light1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light1")
    /// Image `light20`.
    static let light20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light20")
    /// Image `light21`.
    static let light21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light21")
    /// Image `light22`.
    static let light22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light22")
    /// Image `light23`.
    static let light23 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light23")
    /// Image `light24`.
    static let light24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light24")
    /// Image `light25`.
    static let light25 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light25")
    /// Image `light26`.
    static let light26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light26")
    /// Image `light27`.
    static let light27 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light27")
    /// Image `light2`.
    static let light2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light2")
    /// Image `light3`.
    static let light3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light3")
    /// Image `light4`.
    static let light4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light4")
    /// Image `light5`.
    static let light5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light5")
    /// Image `light6`.
    static let light6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light6")
    /// Image `light7`.
    static let light7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light7")
    /// Image `light8`.
    static let light8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light8")
    /// Image `light9`.
    static let light9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "light9")
    /// Image `menuProfileIcon`.
    static let menuProfileIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuProfileIcon")
    /// Image `profileDefault`.
    static let profileDefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileDefault")
    /// Image `send`.
    static let send = Rswift.ImageResource(bundle: R.hostingBundle, name: "send")
    /// Image `smack1024`.
    static let smack1024 = Rswift.ImageResource(bundle: R.hostingBundle, name: "smack1024")
    /// Image `smackBack`.
    static let smackBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "smackBack")
    /// Image `smackBurger`.
    static let smackBurger = Rswift.ImageResource(bundle: R.hostingBundle, name: "smackBurger")
    /// Image `smackLogo`.
    static let smackLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "smackLogo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addChannelButton", bundle: ..., traitCollection: ...)`
    static func addChannelButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addChannelButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closeButton", bundle: ..., traitCollection: ...)`
    static func closeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark0", bundle: ..., traitCollection: ...)`
    static func dark0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark1", bundle: ..., traitCollection: ...)`
    static func dark1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark10", bundle: ..., traitCollection: ...)`
    static func dark10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark11", bundle: ..., traitCollection: ...)`
    static func dark11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark12", bundle: ..., traitCollection: ...)`
    static func dark12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark13", bundle: ..., traitCollection: ...)`
    static func dark13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark14", bundle: ..., traitCollection: ...)`
    static func dark14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark15", bundle: ..., traitCollection: ...)`
    static func dark15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark16", bundle: ..., traitCollection: ...)`
    static func dark16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark17", bundle: ..., traitCollection: ...)`
    static func dark17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark18", bundle: ..., traitCollection: ...)`
    static func dark18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark19", bundle: ..., traitCollection: ...)`
    static func dark19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark19, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark2", bundle: ..., traitCollection: ...)`
    static func dark2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark20", bundle: ..., traitCollection: ...)`
    static func dark20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark21", bundle: ..., traitCollection: ...)`
    static func dark21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark21, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark22", bundle: ..., traitCollection: ...)`
    static func dark22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark22, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark23", bundle: ..., traitCollection: ...)`
    static func dark23(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark23, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark24", bundle: ..., traitCollection: ...)`
    static func dark24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark25", bundle: ..., traitCollection: ...)`
    static func dark25(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark25, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark26", bundle: ..., traitCollection: ...)`
    static func dark26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark26, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark27", bundle: ..., traitCollection: ...)`
    static func dark27(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark27, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark3", bundle: ..., traitCollection: ...)`
    static func dark3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark4", bundle: ..., traitCollection: ...)`
    static func dark4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark5", bundle: ..., traitCollection: ...)`
    static func dark5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark6", bundle: ..., traitCollection: ...)`
    static func dark6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark7", bundle: ..., traitCollection: ...)`
    static func dark7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark8", bundle: ..., traitCollection: ...)`
    static func dark8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark9", bundle: ..., traitCollection: ...)`
    static func dark9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light0", bundle: ..., traitCollection: ...)`
    static func light0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light1", bundle: ..., traitCollection: ...)`
    static func light1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light10", bundle: ..., traitCollection: ...)`
    static func light10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light11", bundle: ..., traitCollection: ...)`
    static func light11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light12", bundle: ..., traitCollection: ...)`
    static func light12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light13", bundle: ..., traitCollection: ...)`
    static func light13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light14", bundle: ..., traitCollection: ...)`
    static func light14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light15", bundle: ..., traitCollection: ...)`
    static func light15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light16", bundle: ..., traitCollection: ...)`
    static func light16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light17", bundle: ..., traitCollection: ...)`
    static func light17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light18", bundle: ..., traitCollection: ...)`
    static func light18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light19", bundle: ..., traitCollection: ...)`
    static func light19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light19, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light2", bundle: ..., traitCollection: ...)`
    static func light2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light20", bundle: ..., traitCollection: ...)`
    static func light20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light21", bundle: ..., traitCollection: ...)`
    static func light21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light21, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light22", bundle: ..., traitCollection: ...)`
    static func light22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light22, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light23", bundle: ..., traitCollection: ...)`
    static func light23(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light23, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light24", bundle: ..., traitCollection: ...)`
    static func light24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light25", bundle: ..., traitCollection: ...)`
    static func light25(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light25, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light26", bundle: ..., traitCollection: ...)`
    static func light26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light26, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light27", bundle: ..., traitCollection: ...)`
    static func light27(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light27, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light3", bundle: ..., traitCollection: ...)`
    static func light3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light4", bundle: ..., traitCollection: ...)`
    static func light4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light5", bundle: ..., traitCollection: ...)`
    static func light5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light6", bundle: ..., traitCollection: ...)`
    static func light6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light7", bundle: ..., traitCollection: ...)`
    static func light7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light8", bundle: ..., traitCollection: ...)`
    static func light8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light9", bundle: ..., traitCollection: ...)`
    static func light9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.light9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menuProfileIcon", bundle: ..., traitCollection: ...)`
    static func menuProfileIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuProfileIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileDefault", bundle: ..., traitCollection: ...)`
    static func profileDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileDefault, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "send", bundle: ..., traitCollection: ...)`
    static func send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smack1024", bundle: ..., traitCollection: ...)`
    static func smack1024(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smack1024, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smackBack", bundle: ..., traitCollection: ...)`
    static func smackBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smackBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smackBurger", bundle: ..., traitCollection: ...)`
    static func smackBurger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smackBurger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smackLogo", bundle: ..., traitCollection: ...)`
    static func smackLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smackLogo, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
